# 0 "FRONTEND/front.cpp"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "FRONTEND/front.cpp"
# 27 "FRONTEND/front.cpp"
void _main (void)
{
    setlocale(LC_CTYPE, "");

    FILE* SourceText = fopen ("EXAMPLES/test.ger", "r");
    MLA (SourceText != NULL);

    SSrc Source = *(construct_source (&Source, SourceText));

    fclose (SourceText);

    SToken* TokenArr = lex_src (&Source);

    free (Source.Code);
    free (TokenArr);

    return;
}





SSrc* construct_source (SSrc* Source, FILE* SourceText)
{



    fwscanf (SourceText, L"%ml[^~]", &Source->Code);
    wprintf (L"#%ls#", Source->Code);

    Source->ip = 0;
    Source->size = wcslen (Source->Code);





    return Source;
}





SToken* lex_src (SSrc* Source)
{
    SToken* TokenArr = (SToken*) calloc (Source->size, sizeof (*TokenArr));

    wprintf (L"%lu==%lu==\n", Source->ip, Source->size);

    while (Source->ip < Source->size)
    {
        do_token (Source, TokenArr);
    }

    return TokenArr;
}

void do_token (SSrc* Source, SToken* TokenArr)
{
    seek (Source);
    CharT* Lexem = NULL;

    MLA (swscanf (&(Source->Code[Source->ip]), L"%m[^ \n;]", &Lexem) > 0);

    parse_token (Lexem, TokenArr);

    Source->ip += wcslen (Lexem);

    return;
}

CharT* parse_token (CharT* Lexem, SToken* TokenArr)
{
    wprintf (L"tkn '%ls'\n", Lexem);







    if (0) {}
# 1 "FRONTEND/Lexer.h" 1
else if ((Lexem[0] >= L'0' && Lexem[0] <= L'9'))
{
  {
    wprintf (L"s\n");
  };
}




else if ((Lexem[0] >= '0' && Lexem[0] <= '9')) { { printf ("s\n"); }; }
# 112 "FRONTEND/front.cpp" 2
    else
    {
        printf ("Lexer default error\n");
        MLA (0);
    }


}



void seek (SSrc* Source)
{
    for (; Source->ip < Source->size; Source->ip++)
    {

        if ((Source->Code[Source->ip] != L'\n') && ((Source->Code[Source->ip] != L' ')))
        {
            return;
        }
    }

    return;
}

void seek_out (SSrc* Source)
{
    for (; Source->ip < Source->size; Source->ip++)
    {

        if ((Source->Code[Source->ip] == L'\n'))
        {
            Source->ip++;
            return;
        }
    }

    return;
}
