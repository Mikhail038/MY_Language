#==============================================================================================================================================

VR_FLAGS = -D _DEBUG -g -ggdb3 -std=c++17 -O0

ASSAN = -fsanitize=address,alignment,bool,bounds,enum,float-cast-overflow,float-divide-by-zero,integer-divide-by-zero,leak,nonnull-attribute,null,object-size,return,returns-nonnull-attribute,shift,signed-integer-overflow,undefined,unreachable,vla-bound,vptr

DOP = -Wall -Wextra -Weffc++ -Waggressive-loop-optimizations -Wc++14-compat -Wmissing-declarations -Wcast-align -Wcast-qual -Wchar-subscripts -Wconditionally-supported -Wconversion -Wctor-dtor-privacy -Wempty-body -Wfloat-equal -Wformat-nonliteral -Wformat-security -Wformat-signedness -Wformat=2 -Winline -Wlogical-op -Wnon-virtual-dtor -Wopenmp-simd -Woverloaded-virtual -Wpacked -Wpointer-arith -Winit-self -Wredundant-decls -Wshadow -Wsign-conversion -Wstrict-null-sentinel -Wstrict-overflow=2 -Wsuggest-attribute=noreturn -Wsuggest-final-methods -Wsuggest-final-types -Wsuggest-override -Wswitch-default -Wswitch-enum -Wsync-nand -Wundef -Wunreachable-code -Wunused -Wuseless-cast -Wvariadic-macros -Wno-literal-suffix -Wno-missing-field-initializers -Wno-narrowing -Wno-old-style-cast -Wno-varargs -Wstack-protector -fcheck-new -fsized-deallocation -fstack-protector -fstrict-overflow -flto-odr-type-merging -fno-omit-frame-pointer -Wlarger-than=8192 -Wstack-usage=8192 -pie -fPIE

DIRECTORIES = -IASM -ICPU -IDISASM -ISTACK -IEXTRA

#==============================================================================================================================================

VR_FLAGS += $(ASSAN)

VR_FLAGS += $(DIRECTORIES)

VR_FLAGS += $(DOP)

#==============================================================================================================================================

VR_COMPILER = g++

#==============================================================================================================================================

VR_OBJECT = BACKEND/BUILD/OBJECTS

#==============================================================================================================================================

all: DO

#==============================================================================================================================================

DO: DO_FOLDERS DO_ASM DO_PROC DO_DISASM

#==============================================================================================================================================

DO_PROC: $(VR_OBJECTS)/m_proc.o $(VR_OBJECTS)/proc.o $(VR_OBJECTS)/disasm.o $(VR_OBJECTS)/stack.o $(VR_OBJECTS)/functions.o
	$(VR_COMPILER) $(VR_OBJECTS)/m_proc.o $(VR_OBJECTS)/proc.o $(VR_OBJECTS)/disasm.o $(VR_OBJECTS)/stack.o $(VR_OBJECTS)/functions.o -o BUILD/proc $(CXX_FLAGS)

$(VR_OBJECTS)/m_proc.o: CPU/m_proc.cpp
	$(VR_COMPILER) -c -o $(VR_OBJECTS)/m_proc.o CPU/m_proc.cpp $(CXX_FLAGS)

$(VR_OBJECTS)/proc.o: CPU/proc.cpp
	$(VR_COMPILER) -c -o $(VR_OBJECTS)/proc.o CPU/proc.cpp $(CXX_FLAGS)

#==============================================================================================================================================

$(VR_OBJECTS)/stack.o: ../STACK/stack.cpp
	$(VR_COMPILER) -c -o $(VR_OBJECTS)/stack.o ../STACK/stack.cpp $(CXX_FLAGS)

#==============================================================================================================================================

DO_ASM: $(VR_OBJECTS)/m_asm.o $(VR_OBJECTS)/asm.o $(VR_OBJECTS)/stack.o
	$(VR_COMPILER) $(VR_OBJECTS)/m_asm.o $(VR_OBJECTS)/asm.o $(VR_OBJECTS)/stack.o -o BUILD/asm $(CXX_FLAGS)

$(VR_OBJECTS)/m_asm.o: ASM/m_asm.cpp
	$(VR_COMPILER) -c -o $(VR_OBJECTS)/m_asm.o ASM/m_asm.cpp $(CXX_FLAGS)

$(VR_OBJECTS)/asm.o: ASM/asm.cpp
	$(VR_COMPILER) -c -o $(VR_OBJECTS)/asm.o ASM/asm.cpp $(CXX_FLAGS)

#==============================================================================================================================================

DO_DISASM: $(VR_OBJECTS)/m_disasm.o $(VR_OBJECTS)/disasm.o $(VR_OBJECTS)/stack.o $(VR_OBJECTS)/functions.o
	$(VR_COMPILER) $(VR_OBJECTS)/m_disasm.o $(VR_OBJECTS)/disasm.o $(VR_OBJECTS)/stack.o $(VR_OBJECTS)/functions.o -o BUILD/disasm $(CXX_FLAGS)

$(VR_OBJECTS)/m_disasm.o: DISASM/m_disasm.cpp
	$(VR_COMPILER) -c -o $(VR_OBJECTS)/m_disasm.o DISASM/m_disasm.cpp $(CXX_FLAGS)

$(VR_OBJECTS)/disasm.o: DISASM/disasm.cpp $(VR_OBJECTS)/functions.o
	$(VR_COMPILER) -c -o $(VR_OBJECTS)/disasm.o DISASM/disasm.cpp $(CXX_FLAGS)

#==============================================================================================================================================

DO_FOLDERS:
	mkdir -p $(VR_OBJECT)

#==============================================================================================================================================


# # Configure compiler. (I use .cpp extension for files, so it must me $(VR_COMPILER))
# CXX = $(VR_COMPILER)
#
# # Configure compile flags.
# CXXFLAGS ?= -Wall -Wextra -ggdb3
#
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# # Configure sources you need to compile.
# SOURCES = Universal/universalUtils.cpp Tree/treeUtils.cpp Differentiator/createTreeFromFile.cpp Differentiator/differentiatorUtils.cpp Differentiator/main.cpp
#
# # Configure directory flags.
# DIRFLAGS = -ITree -IUniversal -IDifferentiator -IDSL
#
# # Configure dependence headers.
# HEADERS  = Tree/treeUtils.h Tree/treeConfig.h Universal/universalUtils.h Differentiator/differentiatorUtils.h
#
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# # Pick executable name.
# EXECUTABLE ?= main
#
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# # WARNING: Don't change values and commands below.
#
# # Making $(VR_OBJECTS) names from sources names.
# $(VR_OBJECTS) = $(SOURCES:.cpp=.o)
#
# # Adding directory flags to compiler flags.
# CXXFLAGS += $(DIRFLAGS)
#
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# .PHONY: all
# all: $(SOURCES) $(EXECUTABLE)
#
# $(EXECUTABLE): $($(VR_OBJECTS)) $(HEADERS)
# 	@echo "Making executable from $(VR_OBJECTS);"
# 	@$(CXX) $(CXXFLAGS) $($(VR_OBJECTS)) -o $@
# 	@echo "Done;"
#
# .PHONY: .cpp.o
# .cpp.o:
# 	@echo "Making object file from $<;"
# 	@$(CXX) -c $(CXXFLAGS) $< -o $@
#
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# .PHONY: clear
# clear:
# 	@echo "Clearing object files and executable;";
